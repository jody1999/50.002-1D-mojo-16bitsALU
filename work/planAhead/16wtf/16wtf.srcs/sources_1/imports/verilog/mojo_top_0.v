/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [23:0] io_led,
    input [23:0] io_dip,
    output reg [7:0] led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_rmba_d, M_rmba_q = 1'h0;
  reg [15:0] M_rmbb_d, M_rmbb_q = 1'h0;
  reg [5:0] M_operation_d, M_operation_q = 1'h0;
  localparam A_state = 2'd0;
  localparam B_state = 2'd1;
  localparam OUTCOME_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = A_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  localparam ADD_iter = 4'd0;
  localparam SUB_iter = 4'd1;
  localparam AND_iter = 4'd2;
  localparam OR_iter = 4'd3;
  localparam XOR_iter = 4'd4;
  localparam LDR_iter = 4'd5;
  localparam SHL_iter = 4'd6;
  localparam SHR_iter = 4'd7;
  localparam SRA_iter = 4'd8;
  localparam CEQ_iter = 4'd9;
  localparam CLT_iter = 4'd10;
  localparam CLE_iter = 4'd11;
  localparam MUL_iter = 4'd12;
  localparam DIV_iter = 4'd13;
  localparam ERR_iter = 4'd14;
  localparam PAS_iter = 4'd15;
  
  reg [3:0] M_iter_d, M_iter_q = ADD_iter;
  localparam MANUAL_mode = 1'd0;
  localparam AUTO_mode = 1'd1;
  
  reg M_mode_d, M_mode_q = MANUAL_mode;
  
  wire [4-1:0] M_alu_first;
  wire [4-1:0] M_alu_second;
  wire [4-1:0] M_alu_third;
  wire [4-1:0] M_alu_fourth;
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  combinedALU_3 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .first(M_alu_first),
    .second(M_alu_second),
    .third(M_alu_third),
    .fourth(M_alu_fourth),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_iter_d = M_iter_q;
    M_mode_d = M_mode_q;
    M_operation_d = M_operation_q;
    M_counter_d = M_counter_q;
    M_rmbb_d = M_rmbb_q;
    M_rmba_d = M_rmba_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_counter_d = M_counter_q + 1'h1;
    led[0+7-:8] = 8'h00;
    io_led[0+7-:8] = 8'h00;
    io_led[8+7-:8] = 8'h00;
    io_led[16+7-:8] = 8'h00;
    M_alu_a[0+15-:16] = M_rmba_q;
    M_alu_b[0+15-:16] = M_rmbb_q;
    M_alu_alufn = M_operation_q;
    M_seg_values = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_seg_values = {M_alu_first, M_alu_second, M_alu_third, M_alu_fourth};
    
    case (M_mode_q)
      MANUAL_mode: begin
        if (io_button[1+0-:1] == 1'h1) begin
          M_mode_d = AUTO_mode;
        end
      end
    endcase
    if (M_mode_q == AUTO_mode) begin
      M_alu_a[0+15-:16] = 16'h0004;
      M_alu_b[0+15-:16] = 16'h0002;
      io_led[0+7-:8] = M_alu_out[0+7-:8];
      io_led[8+7-:8] = M_alu_out[8+7-:8];
      
      case (M_iter_q)
        ADD_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h00;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (M_alu_out == 16'h0006) begin
              M_iter_d = SUB_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        SUB_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h01;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (M_alu_out == 16'h0002) begin
              M_iter_d = AND_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        AND_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h18;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (M_alu_out == 16'h0000) begin
              M_iter_d = OR_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        OR_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h1e;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (M_alu_out == 16'h0006) begin
              M_iter_d = XOR_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        XOR_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h16;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (M_alu_out == 16'h0006) begin
              M_iter_d = LDR_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        LDR_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h1a;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (M_alu_out == 16'h0004) begin
              M_iter_d = SHL_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        SHL_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h20;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (M_alu_out == 16'h0010) begin
              M_iter_d = SHR_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        SHR_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h21;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (M_alu_out == 16'h0001) begin
              M_iter_d = SRA_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        SRA_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h23;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (M_alu_out == 16'h0001) begin
              M_iter_d = CEQ_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        CEQ_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h33;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (M_alu_out == 16'h0000) begin
              M_iter_d = CLT_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        CLT_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h35;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (M_alu_out == 16'h0000) begin
              M_iter_d = CLE_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        CLE_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h37;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (M_alu_out == 16'h0000) begin
              M_iter_d = MUL_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        MUL_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h02;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (M_alu_out == 16'h0010) begin
              M_iter_d = DIV_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        DIV_iter: begin
          M_alu_a[0+15-:16] = 16'h0004;
          M_alu_b[0+15-:16] = 16'h0002;
          M_alu_alufn = 6'h03;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (M_alu_out == 16'h0002) begin
              M_iter_d = PAS_iter;
            end else begin
              M_iter_d = ERR_iter;
            end
          end
        end
        PAS_iter: begin
          led[0+2-:3] = 7'h6f;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            M_iter_d = ADD_iter;
          end
        end
        ERR_iter: begin
          led[0+2-:3] = 1'h0;
        end
      endcase
    end else begin
      
      case (M_state_q)
        A_state: begin
          M_operation_d = io_dip[16+0+5-:6];
          led[7+0-:1] = 1'h1;
          led[0+6-:7] = 7'h00;
          M_rmba_d[8+7-:8] = io_dip[8+0+7-:8];
          M_rmba_d[0+7-:8] = io_dip[0+0+7-:8];
          io_led[8+0+7-:8] = io_dip[8+0+7-:8];
          io_led[0+0+7-:8] = io_dip[0+0+7-:8];
          io_led[16+0+7-:8] = io_dip[16+0+7-:8];
          if (io_button[3+0-:1]) begin
            M_state_d = B_state;
          end
          M_seg_values = {M_alu_first, M_alu_second, M_alu_third, M_alu_fourth};
        end
        B_state: begin
          M_operation_d = io_dip[16+0+5-:6];
          led[6+1-:2] = 2'h3;
          led[0+5-:6] = 6'h00;
          M_rmbb_d[8+7-:8] = io_dip[8+0+7-:8];
          M_rmbb_d[0+7-:8] = io_dip[0+0+7-:8];
          io_led[8+0+7-:8] = io_dip[8+0+7-:8];
          io_led[0+0+7-:8] = io_dip[0+0+7-:8];
          if (io_button[4+0-:1]) begin
            M_state_d = OUTCOME_state;
          end
        end
        OUTCOME_state: begin
          M_operation_d = io_dip[16+0+5-:6];
          led[5+2-:3] = 3'h7;
          led[0+4-:5] = 5'h00;
          io_led[8+0+7-:8] = M_alu_out[8+7-:8];
          io_led[0+0+7-:8] = M_alu_out[0+7-:8];
          if (io_button[0+0-:1]) begin
            M_state_d = A_state;
            led[0+7-:8] = 8'h00;
            io_led[0+7-:8] = 8'h00;
            io_led[8+7-:8] = 8'h00;
            io_led[16+7-:8] = 8'h00;
            M_alu_a[0+15-:16] = M_rmba_q;
            M_alu_b[0+15-:16] = M_rmbb_q;
            M_alu_alufn = M_operation_q;
          end
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_rmba_q <= 1'h0;
      M_rmbb_q <= 1'h0;
      M_operation_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_iter_q <= 1'h0;
      M_mode_q <= 1'h0;
    end else begin
      M_rmba_q <= M_rmba_d;
      M_rmbb_q <= M_rmbb_d;
      M_operation_q <= M_operation_d;
      M_counter_q <= M_counter_d;
      M_iter_q <= M_iter_d;
      M_mode_q <= M_mode_d;
    end
  end
  
endmodule
