module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
   
    output io_led[3][8],
    input io_dip[3][8],
    output led[8],

   
    output io_seg[8],       //7 segment LEDs on IO shield
    output io_sel[4],
    input io_button[5]   
    ) {
  
  sig rst;  // reset signal
  
  
 .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;  
    
    .rst(rst){
      dff rmba[16];
      dff rmbb[16];
      dff operation[6];
      fsm state(#INIT(A), .clk(clk), .rst(rst)) = {A, B, OUTCOME}; 
      multi_seven_seg seg;
      
      dff counter[27]; 
    //8 cases of truth table with one error state  
      fsm iter= {ADD, SUB, AND, OR,XOR, LDR, SHL, SHR, SRA, CEQ, CLT, CLE,MUL,DIV,ERR,PAS}; 
      fsm mode= {MANUAL,AUTO};
  }
 }
  
  //sig 
  combinedALU alu;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    counter.d = counter.q + 1; //next state of clock
    
    led[7:0] = 8h00;
    io_led[0] = 8h00;
    io_led[1] = 8h00; 
    io_led[2] = 8h00;   
    
    alu.a [15:0] = rmba.q;
    alu.b [15:0] = rmbb.q;
    
    alu.alufn = operation.q;
   
    seg.values = {4h0, 4h0, 4h0, 4h0};
    
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;    
    seg.values = {alu.first, alu.second, alu.third, alu.fourth };
    
    case (mode.q) {
      mode.MANUAL:
        if (io_button[1] == 1){
          mode.d = mode.AUTO;
        }
    }
    
    // AUTO MODE
    if (mode.q == mode.AUTO) {
      alu.a [15:0] = 16h0004;
      alu.b [15:0] = 16h0002;
      io_led[0] = alu.out[7:0];
      io_led[1] = alu.out[15:8];
      
      case(iter.q){
              
        iter.ADD:       
        alu.a [15:0] = 16h0004;
        alu.b [15:0] = 16h0002;
        alu.alufn = 6b000000;
          
         if (counter.q[26] == 1){
          if(alu.out == 16h0006){          
             iter.d = iter.SUB;
            }else{
              iter.d = iter.ERR;
            }
          }
        
          
          iter.SUB:       
          alu.a [15:0] = 16h0004;
          alu.b [15:0] = 16h0002;
          alu.alufn = 6b000001;
          
         if (counter.q[26] == 0) {
          if(alu.out == 16h0002){
            iter.d = iter.AND;
            }else{
              iter.d = iter.ERR;
            }
          }
        
          
          iter.AND:       
          alu.a [15:0] = 16h0004;
          alu.b [15:0] = 16h0002;
          alu.alufn = 6b011000;
          
          if (counter.q[26] == 1) {
          if(alu.out == 16h0000){
            iter.d = iter.OR;
            }else{
            iter.d = iter.ERR;
            }
          }
        
          
          iter.OR:       
          alu.a [15:0] = 16h0004;
        alu.b [15:0] = 16h0002;
        alu.alufn = 6b011110;
          
          if (counter.q[26] == 0){
          if(alu.out == 16h0006){
            iter.d = iter.XOR;
            }else{
              iter.d = iter.ERR;
            }
          }
        
          
          iter.XOR:     
              alu.a [15:0] = 16h0004;
      alu.b [15:0] = 16h0002;  
        alu.alufn = 6b010110;
          
          if (counter.q[26] == 1){
          if(alu.out == 16h0006){
            iter.d = iter.LDR;
            }else{
              iter.d = iter.ERR;
            }
          }
          
       
          
          iter.LDR:      
              alu.a [15:0] = 16h0004;
      alu.b [15:0] = 16h0002; 
        alu.alufn = 6b011010;
          
           if (counter.q[26] == 0){
           if(alu.out == 16h0004){
            iter.d = iter.SHL;
            }else{
              iter.d = iter.ERR;
            }
          }
       
          
          iter.SHL:    
              alu.a [15:0] = 16h0004;
      alu.b [15:0] = 16h0002;   
        alu.alufn = 6b100000;
          
           if (counter.q[26] == 1){
          if(alu.out == 16h0010){
            iter.d = iter.SHR;
            }else{
            iter.d = iter.ERR;
            }
          }
        
          
          iter.SHR:      
              alu.a [15:0] = 16h0004;
      alu.b [15:0] = 16h0002; 
        alu.alufn = 6b100001;
          
           if (counter.q[26] == 0){
          if(alu.out == 16h0001){
            iter.d = iter.SRA;
            }else{
              iter.d = iter.ERR;
            }
          }
        
          
          iter.SRA:      
              alu.a [15:0] = 16h0004;
      alu.b [15:0] = 16h0002; 
        alu.alufn = 6b100011;
          
          if (counter.q[26] == 1){
          if(alu.out == 16h0001){
            iter.d = iter.CEQ;
            }else{
              iter.d = iter.ERR;
            }
          }
        
          
          iter.CEQ:       
              alu.a [15:0] = 16h0004;
      alu.b [15:0] = 16h0002;
        alu.alufn = 6b110011;
          
          if (counter.q[26] == 0){
          if(alu.out == 16h0000){
            iter.d = iter.CLT;
            }else{
            iter.d = iter.ERR;
            }
          }
        
          
          iter.CLT:
              alu.a [15:0] = 16h0004;
      alu.b [15:0] = 16h0002;       
        alu.alufn = 6b110101;
          
          if (counter.q[26] == 1){
          if(alu.out == 16h0000){
            iter.d = iter.CLE;
            }else{
            iter.d = iter.ERR;
            }
          }
        
          
          iter.CLE:  
        alu.a [15:0] = 16h0004;
        alu.b [15:0] = 16h0002;     
        alu.alufn = 6b110111;
          if (counter.q[26] == 0){
           if(alu.out == 16h0000){
            iter.d = iter.MUL;
            }else{
            iter.d = iter.ERR;
            }
          }
       
          
          iter.MUL:       
        alu.a [15:0] = 16h0004;
        alu.b [15:0] = 16h0002;
        alu.alufn = 6b000010;
          
          if (counter.q[26] == 1){
          if(alu.out == 16h0010){
            iter.d = iter.DIV;
            }else{
            iter.d = iter.ERR;
            }
          }
        
          
          iter.DIV:     
              alu.a [15:0] = 16h0004;
         alu.b [15:0] = 16h0002;  
        alu.alufn = 6b000011;
          
          if (counter.q[26] == 0){
          if(alu.out == 16h0002){
            iter.d = iter.PAS;
            }else{
            iter.d = iter.ERR;
            }
          }
        
          
          iter.PAS:       
           led[2:0] = 111;
          if (counter.q[26] == 1){
         
            iter.d = iter.ADD;
            
          }
          
          iter.ERR:       
           led[2:0] = 000;
          
        }

      
   }
    else {
      case(state.q){
        state.A:
      
         //operation 
        operation.d=io_dip[2][5:0];
      
        led[7] = 1;
        led[6:0] = 7b0000000;
        
        rmba.d[15:8] = io_dip[1][7:0];
        rmba.d[7:0] = io_dip[0][7:0];
               
        io_led[1][7:0] = io_dip[1][7:0]; 
        io_led[0][7:0] = io_dip[0][7:0];
        io_led[2][7:0] = io_dip[2][7:0];
        
      if(io_button[3]){
        state.d = state.B;
      }
        
      seg.values = {alu.first, alu.second, alu.third, alu.fourth };
      
        
      state.B:
      
        operation.d=io_dip[2][5:0];
        
        led[7:6] = 2b11;
        led[5:0] = 6b000000;
        
        rmbb.d[15:8] = io_dip[1][7:0];
        rmbb.d[7:0] = io_dip[0][7:0];
          
        io_led[1][7:0] = io_dip[1][7:0]; 
        io_led[0][7:0] = io_dip[0][7:0];
        
       if(io_button[4]){
         state.d = state.OUTCOME;
       }
        
      state.OUTCOME:
      
        operation.d=io_dip[2][5:0];
        
        led[7:5] = 3b111;
        led[4:0] = 5b00000;
        
        io_led[1][7:0] = alu.out[15:8]; 
        io_led[0][7:0] = alu.out[7:0];
        
        if(io_button[0]){
          state.d = state.A;
          
          led[7:0] = 8h00;
          io_led[0] = 8h00;
          io_led[1] = 8h00; 
          io_led[2] = 8h00;   
          
          alu.a [15:0] = rmba.q;
          alu.b [15:0] = rmbb.q;
          
          alu.alufn = operation.q;
          }
      }        
    }    
  }  
}